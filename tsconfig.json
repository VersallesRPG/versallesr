{
  // Configurações do Compilador TypeScript
  "compilerOptions": {
    // === Tipo de Módulo e Resolução ===
    "target": "es5", // Compila para JavaScript ES5 para maior compatibilidade com navegadores mais antigos
    "lib": ["dom", "dom.iterable", "esnext"], // Inclui bibliotecas de tipos padrão para o DOM e recursos modernos do JS
    "module": "esnext", // Usa o sistema de módulos ES moderno
    "moduleResolution": "bundler", // Estratégia de resolução de módulos otimizada para bundlers como o Webpack (usado pelo Next.js)
    "resolveJsonModule": true, // Permite importar arquivos .json como módulos
    "allowJs": true, // Permite que arquivos JavaScript sejam incluídos no projeto
    "checkJs": false, // Não verifica erros em arquivos JavaScript (pode ser habilitado se necessário)

    // === Saída e Verificações ===
    "noEmit": true, // Informa ao TypeScript para não gerar arquivos JavaScript (o Next.js cuida disso)
    "isolatedModules": true, // Garante que cada arquivo possa ser transpilado separadamente
    "jsx": "preserve", // Mantém o JSX no output para o Next.js processar (essencial para React)
    "incremental": true, // Habilita compilação incremental para builds mais rápidos

    // === Verificações Rigorosas (Recomendado) ===
    "strict": true, // Habilita todas as verificações de tipo rigorosas
    "noUnusedLocals": true, // Reporta erro se houver variáveis locais não utilizadas
    "noUnusedParameters": true, // Reporta erro se houver parâmetros de função não utilizados
    "noFallthroughCasesInSwitch": true, // Reporta erro se um 'case' em um 'switch' não tiver 'break' ou 'return'
    "skipLibCheck": true, // Pula a verificação de tipos em arquivos de declaração (.d.ts) de bibliotecas (acelera a compilação)
    "forceConsistentCasingInFileNames": true, // Garante que os nomes de arquivos sejam referenciados com o casing consistente

    // === Mapeamento de Caminhos (Aliases) ===
    "baseUrl": ".", // Define o diretório base para resolução de caminhos não relativos
    "paths": {
      "@/*": ["./*"] // Permite importar usando '@/' como atalho para a raiz (ex: '@/components/Button')
    },

    // === Plugins (Exemplo para Tailwind CSS IntelliSense) ===
    "plugins": [
      {
        "name": "next" // Plugin essencial para o Next.js
      }
    ],

    // === Outros ===
    "esModuleInterop": true, // Melhora a interoperabilidade entre módulos CommonJS e ES
    "allowSyntheticDefaultImports": true // Permite importações padrão de módulos sem um export padrão explícito
  },
  // === Arquivos Incluídos na Compilação ===
  "include": [
    "next-env.d.ts", // Arquivo de declaração de tipos específico do Next.js
    "**/*.ts", // Inclui todos os arquivos TypeScript no projeto
    "**/*.tsx", // Inclui todos os arquivos TypeScript com JSX
    ".next/types/**/*.ts" // Inclui tipos gerados pelo Next.js durante o build
    // Adicione aqui se tiver arquivos JS que deseja incluir na verificação (se checkJs for true)
    // "**/*.js",
    // "**/*.jsx"
  ],
  // === Arquivos Excluídos da Compilação ===
  "exclude": [
    "node_modules" // Exclui a pasta de dependências
    // Adicione outras pastas que você deseja excluir (ex: scripts, arquivos de teste específicos)
  ]
}